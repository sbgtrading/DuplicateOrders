
#region Using declarations
using System;
using System.Diagnostics;
//using System.Drawing;
//using System.Drawing.Drawing2D;
using System.ComponentModel;
using System.Xml.Serialization;
using NinjaTrader.Data;
using NinjaTrader.Gui.Chart;
#endregion

using System.ComponentModel.DataAnnotations;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Tools;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using SharpDX.DirectWrite;
using NinjaTrader.NinjaScript.DrawingTools;
using System.Windows.Media;
// This namespace holds all indicators and is required. Do not change it.
namespace NinjaTrader.NinjaScript.Indicators
{
	[Description("")]
	public class BollingerSqueezeIW : Indicator
	{
		private	double		numStdDev	= 2;
		private int			pPeriod		= 12;
		private int			pSmoothPeriod		= 20;
		private Series<double> Squeeze;
		private Indicator MA;
		private int EarlyAlertBar = 0;
		private int AlertBar = 0;

		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				bool IsBen = NinjaTrader.Cbi.License.MachineId.CompareTo("B0D2E9D1C802E279D3678D7DE6A33CE4")==0 && System.IO.File.Exists("c:\\222222222222.txt");
				if(!IsBen)
					VendorLicense("IndicatorWarehouse", "AIBollingerSqueeze", "www.IndicatorWarehouse.com", "License@indicatorwarehouse.com");
				AddPlot(new Stroke(Brushes.DimGray,2), PlotStyle.Bar, "Large");
				AddPlot(new Stroke(Brushes.Lime,2),PlotStyle.Bar, "Small");
				AddPlot(new Stroke(Brushes.Red,1), PlotStyle.Line, "Avg");

				IsOverlay=false;
				//PriceTypeSupported	= true;
				Name = "iw Bollinger Squeeze";
				Squeeze = new Series<double>(this, MaximumBarsLookBack.Infinite);//inside State.DataLoaded
			}else if(State == State.Configure){
				if(pTypeOfMA == BollingerSqueeze_MAtype.EMA)       MA = EMA(Input,pPeriod);
				else if(pTypeOfMA == BollingerSqueeze_MAtype.SMA)  MA = SMA(Input,pPeriod);
				else if(pTypeOfMA == BollingerSqueeze_MAtype.HMA)  MA = HMA(Input,pPeriod);
				else if(pTypeOfMA == BollingerSqueeze_MAtype.TMA)  MA = TMA(Input,pPeriod);
				else if(pTypeOfMA == BollingerSqueeze_MAtype.TEMA) MA = TEMA(Input,pPeriod);
				else if(pTypeOfMA == BollingerSqueeze_MAtype.WMA)  MA = WMA(Input,pPeriod);
			}
		}
		protected override void OnBarUpdate()
		{
			if(CurrentBar <= pPeriod)
			{	return;
			}

			double SDev = StdDev(MA,pPeriod)[0]*numStdDev;

			Squeeze[0] = (SDev * 2.0);
			Avg[0] = (SMA(Squeeze, pSmoothPeriod)[0]);
			if(Squeeze[0]>Avg[0]) {
				Large[0] = (Squeeze[0]);
				Small.Reset();
			}
			else {
				Large.Reset();
				Small[0] = (Squeeze[0]);
			}
			if(Large.IsValidDataPoint(0) && Small.IsValidDataPoint(1) && AlertBar!=CurrentBar){
				if(State != State.Historical){
					if(pEnablePopup_Expansion) Log("Bollinger expansion on "+Instrument.FullName+" "+Bars.BarsPeriod.ToString(),Cbi.LogLevel.Alert);
					if(pExpansionSound.Length>0) Alert(CurrentBar.ToString(),Priority.High,"Bollinger Expansion",AddSoundFolder(this.pExpansionSound),1,Brushes.Red,Brushes.White);  
					if(pEmailAddress_Expansion.Length>0)SendMail(pEmailAddress_Expansion,"Bollinger Squeeze expansion on "+Instrument.FullName+" "+Bars.BarsPeriod.ToString(),"Bollinger Squeeze indicator running on "+Instrument.FullName+" "+Bars.BarsPeriod.ToString()+Environment.NewLine+Environment.NewLine+"This email automatically generated by the 'iw Bollinger Squeeze' indicator");
				}
				AlertBar=CurrentBar;
			}
			if(Large.IsValidDataPoint(1) && Small.IsValidDataPoint(0) && AlertBar!=CurrentBar){
				if(State != State.Historical){
					if(pEnablePopup_Contraction) Log("Bollinger contraction on "+Instrument.FullName+" "+Bars.BarsPeriod.ToString(),Cbi.LogLevel.Alert);
					if(pContractionSound.Length>0) Alert(CurrentBar.ToString(),Priority.High,"Bollinger Contraction",AddSoundFolder(this.pContractionSound),1,Brushes.Red,Brushes.White);
					if(pEmailAddress_Contraction.Length>0)SendMail(pEmailAddress_Contraction,"Bollinger Squeeze contraction on "+Instrument.FullName+" "+Bars.BarsPeriod.ToString(),"Bollinger Squeeze indicator running on "+Instrument.FullName+" "+Bars.BarsPeriod.ToString()+Environment.NewLine+Environment.NewLine+"This email automatically generated by the 'iw Bollinger Squeeze' indicator");
				}
				AlertBar=CurrentBar;
			}
			if(Small.IsValidDataPoint(0) && Small.IsValidDataPoint(1)&& Small[0]>Small[1] && EarlyAlertBar!=CurrentBar){
				if(State != State.Historical){
					if(pEnablePopup_EarlyExpansion) Log("Bollinger early expansion on "+Instrument.FullName+" "+Bars.BarsPeriod.ToString(),Cbi.LogLevel.Alert);
					if(pEarlyExpansionSound.Length>0) Alert(CurrentBar.ToString(),Priority.High,"Bollinger early expansion", AddSoundFolder(this.pEarlyExpansionSound),1,Brushes.Black,Brushes.White); 
				}
				EarlyAlertBar=CurrentBar;
			}
		}
		internal class LoadSoundFileList : StringConverter
		{
			#region LoadSoundFileList
			public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
			{
				//true means show a combobox
				return true;
			}

			public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
			{
				//true will limit to list. false will show the list, 
				//but allow free-form entry
				return false;
			}

			public override System.ComponentModel.TypeConverter.StandardValuesCollection
				GetStandardValues(ITypeDescriptorContext context)
			{
				string folder = System.IO.Path.Combine(NinjaTrader.Core.Globals.InstallDir,"sounds");
				string search = "*.wav";
				System.IO.DirectoryInfo dirCustom=null;
				System.IO.FileInfo[] filCustom=null;
				try{
					dirCustom = new System.IO.DirectoryInfo(folder);
					filCustom = dirCustom.GetFiles(search);
				}catch{}

				var list = new System.Collections.Generic.List<string>();//new string[filCustom.Length+1];
				list.Add("none");
				if(filCustom!=null){
					foreach (System.IO.FileInfo fi in filCustom)
					{
						if(!list.Contains(fi.Name)){
							list.Add(fi.Name);
						}
					}
				}
				return new StandardValuesCollection(list.ToArray());
			}
			#endregion
        }
		#region Plots
		/// <summary>
		/// Get the upper value.
		/// </summary>
		[Browsable(false)]
		[XmlIgnore()]
		public Series<double> Large
		{
			get { return Values[0]; }
		}

		/// <summary>
		/// Get the middle value.
		/// </summary>
		[Browsable(false)]
		[XmlIgnore()]
		public Series<double> Small
		{
			get { return Values[1]; }
		}
		/// <summary>
		/// Get the middle value.
		/// </summary>
		[Browsable(false)]
		[XmlIgnore()]
		public Series<double> Avg
		{
			get { return Values[2]; }
		}
		#endregion

//====================================================================
		private string AddSoundFolder(string wav){
			return System.IO.Path.Combine(NinjaTrader.Core.Globals.InstallDir, @"sounds\"+wav);
		}
//====================================================================
		
		#region Properties
//		private Brush pDownBreakoutBrush = Brushes.Red;
//		[XmlIgnore()]
//		[Description("Color of background when the close of the bar is below the lower bollinger band")]
//		[Category("Breakout Coloring")]
//		[Gui.Design.DisplayNameAttribute("Color Downward")]
//		public Brush DownBreakoutBrush{	get { return pDownBreakoutBrush; }	set { pDownBreakoutBrush = value; }		}
//		[Browsable(false)]
//		public string DownClSerialize
//		{	get { return Serialize.BrushToString(pDownBreakoutColor); } set { pDownBreakoutColor = Serialize.StringToBrush(value); }
//		}
//		private int pDownBreakoutOpacity = 0;
//		[Description("Opacity of background when the close is below the lower bollinger band...0=transparent thru 10=opaque")]
//		[Category("Breakout Coloring")]
//		[Gui.Design.DisplayNameAttribute("Down Opacity")]
//		public int DownBreakoutOpacity{	get { return pDownBreakoutOpacity; }	set { pDownBreakoutOpacity = Math.Max(0,Math.Min(10,value)); }		}
//
//		private Brush pUpBreakoutBrush = Brushes.Green;
//		[XmlIgnore()]
//		[Description("Color of background when the close of the bar is above the upper bollinger band")]
//		[Category("Breakout Coloring")]
//		[Gui.Design.DisplayNameAttribute("Color Upward")]
//		public Brush UpBreakoutBrush{	get { return pUpBreakoutBrush; }	set { pUpBreakoutBrush = value; }		}
//		[Browsable(false)]
//		public string UpClSerialize
//		{	get { return Serialize.BrushToString(pUpBreakoutColor); } set { pUpBreakoutColor = Serialize.StringToBrush(value); }
//		}
//		private int pUpBreakoutOpacity = 0;
//		[Description("Opacity of background when the close is above the upper bollinger band...0=transparent thru 10=opaque")]
//		[Category("Breakout Coloring")]
//		[Gui.Design.DisplayNameAttribute("Up Opacity")]
//		public int UpBreakoutOpacity{	get { return pUpBreakoutOpacity; }	set { pUpBreakoutOpacity = Math.Max(0,Math.Min(10,value)); }		}

		private string pEmailAddress_Contraction = "";
		[Description("Send an email when the squeeze histo goes below the average line (leave blank to turn-off email sends)")]
		[Category("Alert Contraction")]
		public string EmailAddress_Contraction
		{
			get { return pEmailAddress_Contraction; }
			set { pEmailAddress_Contraction = value.Trim(); }
		}
		private bool pEnablePopup_Contraction = false;
		[Description("Enable popup when the squeeze goes from large to small (from above the average line, to below it)")]
		[Category("Alert HistoOverAvg")]
		public bool EnablePopup_Contraction
		{
			get { return pEnablePopup_Contraction; }
			set { pEnablePopup_Contraction = value; }
		}
		private string pContractionSound = "Alert2.wav";
		[Category("Alert HistoOverAvg")]
		[RefreshProperties(RefreshProperties.All)]
		[TypeConverter(typeof(LoadSoundFileList))]
		[Description("WAV file to play when the histo goes below the average line (leave blank to turn-off this alert)")]
		public string ContractionSound
		{
			get { return pContractionSound; }
			set { pContractionSound = value.Trim(); }
		}

		private string pEmailAddress_Expansion = "";
		[Description("Send an email when the squeeze goes from small to large (leave blank to turn-off email sends)")]
		[Category("Alert Expansion")]
		public string EmailAddress_Expansion
		{
			get { return pEmailAddress_Expansion; }
			set { pEmailAddress_Expansion = value.Trim(); }
		}
		private bool pEnablePopup_Expansion = false;
		[Description("Enable popup when the squeeze goes from small to large")]
		[Category("Alert Expansion")]
		public bool EnablePopup_Expansion
		{
			get { return pEnablePopup_Expansion; }
			set { pEnablePopup_Expansion = value; }
		}
		private string pExpansionSound = "Alert2.wav";
		[Category("Alert Expansion")]
		[RefreshProperties(RefreshProperties.All)]
		[TypeConverter(typeof(LoadSoundFileList))]
		[Description("WAV file to play when the squeeze switches from 'Small' to 'Large' (leave blank to turn-off this alert)")]
		public string ExpansionSound
		{
			get { return pExpansionSound; }
			set { pExpansionSound = value.Trim(); }
		}

		private bool pEnablePopup_EarlyExpansion = false;
		[Description("Enable popup when the squeeze stays small, but becomes larger in size")]
		[Category("Alert EarlyExpansion")]
		public bool EnablePopup_EarlyExpansion
		{
			get { return pEnablePopup_EarlyExpansion; }
			set { pEnablePopup_EarlyExpansion = value; }
		}

		private string pEarlyExpansionSound = "Alert2.wav";
		[Category("Alert EarlyExpansion")]
		[RefreshProperties(RefreshProperties.All)]
		[TypeConverter(typeof(LoadSoundFileList))]
		[Description("WAV file to play when the squeeze becomes larger, but it's still in the 'Small' range (leave blank to turn-off this alert)")]
		public string EarlyExpansionSound
		{
			get { return pEarlyExpansionSound; }
			set { pEarlyExpansionSound = value.Trim(); }
		}
		/// <summary>
		/// </summary>
		[Description("Number of standard deviations in the bands")]
// 		[Category("Parameters")]
// [Gui.Design.DisplayNameAttribute("Std devs")]
[Display(ResourceType = typeof(Custom.Resource), Name = "Std devs",  GroupName = "Parameters")]
		public double NumStdDev
		{
			get { return numStdDev; }
			set { numStdDev = Math.Max(0, value); }
		}

		[Description("Numbers of bars used for SMA of Squeeze calculation")]
		[Category("Parameters")]
		public int SmoothingPeriod
		{
			get { return pSmoothPeriod; }
			set { pSmoothPeriod = Math.Max(1, value); }
		}

		[Description("Numbers of bars used for calculations")]
		[Category("Parameters")]
		public int Period
		{
			get { return pPeriod; }
			set { pPeriod = Math.Max(1, value); }
		}

		private BollingerSqueeze_MAtype pTypeOfMA = BollingerSqueeze_MAtype.SMA;
		[Description("Type of MA")]
		[Category("Parameters")]
		public BollingerSqueeze_MAtype MAtype
		{
			get { return pTypeOfMA; }
			set { pTypeOfMA = value; }
		}
		#endregion
	}
}
public enum BollingerSqueeze_MAtype {
	SMA,
	EMA,
	WMA,
	TMA,
	TEMA,
	HMA
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private BollingerSqueezeIW[] cacheBollingerSqueezeIW;
		public BollingerSqueezeIW BollingerSqueezeIW()
		{
			return BollingerSqueezeIW(Input);
		}

		public BollingerSqueezeIW BollingerSqueezeIW(ISeries<double> input)
		{
			if (cacheBollingerSqueezeIW != null)
				for (int idx = 0; idx < cacheBollingerSqueezeIW.Length; idx++)
					if (cacheBollingerSqueezeIW[idx] != null &&  cacheBollingerSqueezeIW[idx].EqualsInput(input))
						return cacheBollingerSqueezeIW[idx];
			return CacheIndicator<BollingerSqueezeIW>(new BollingerSqueezeIW(), input, ref cacheBollingerSqueezeIW);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.BollingerSqueezeIW BollingerSqueezeIW()
		{
			return indicator.BollingerSqueezeIW(Input);
		}

		public Indicators.BollingerSqueezeIW BollingerSqueezeIW(ISeries<double> input )
		{
			return indicator.BollingerSqueezeIW(input);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.BollingerSqueezeIW BollingerSqueezeIW()
		{
			return indicator.BollingerSqueezeIW(Input);
		}

		public Indicators.BollingerSqueezeIW BollingerSqueezeIW(ISeries<double> input )
		{
			return indicator.BollingerSqueezeIW(input);
		}
	}
}

#endregion
