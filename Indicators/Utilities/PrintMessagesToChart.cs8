#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
#endregion

//This namespace holds Indicators in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Indicators.Utilities
{
	public class PrintMessagesToChart : Indicator
	{
		private SortedDictionary<DateTime,string> Msgs = new SortedDictionary<DateTime,string>();
		private DateTime TimeSinceLastUpdate = DateTime.MinValue;

		protected override void OnStateChange()
		{
			if (State == State.SetDefaults)
			{
				Description									= @"";
				Name										= "Print Messages to chart";
				Calculate									= Calculate.OnPriceChange;
				IsOverlay									= true;
				DisplayInDataBox							= true;
				DrawOnPricePanel							= true;
				DrawHorizontalGridLines						= true;
				DrawVerticalGridLines						= true;
				PaintPriceMarkers							= true;
				ScaleJustification							= NinjaTrader.Gui.Chart.ScaleJustification.Right;
				//Disable this property if your indicator requires custom values that cumulate with each new market data event. 
				//See Help Guide for additional information.
				IsSuspendedWhileInactive					= true;
			}
			else if (State == State.Configure)
			{
			}
			else if (State == State.Historical){
				var path = System.IO.Path.Combine(
							pDirectory.Replace("<MyDocuments>",System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments)),
							pFileName);
				var lines = System.IO.File.ReadAllLines(path);
				foreach(var L in lines){
					if(L.Trim().Length==0) continue;
					if(L.StartsWith(@"//")) continue;//skip all comment lines
					var elem = L.Split(new char[]{'\t'},StringSplitOptions.None);
					if(elem.Length>0){
						if(elem[0].Trim().Length==0) continue;//skip all lines that don't have a time (first column);
						if(elem.Length>1){//get the instruments involved in this alert
							var inst = elem[1].Split(new char[]{','});
							if(!inst.Contains("ALL_SYMBOLS") && !inst.Contains(Instrument.MasterInstrument.Name)) continue;//ignore all alerts that are not involved in this alert
							var DT = DateTime.Parse(elem[0]);
							var Desc = elem.Length>=2 ? elem[2].Trim() : "N/A";
							if(Msgs.ContainsKey(DT))
								Msgs[DT] = Msgs[DT] + Environment.NewLine + Desc;
							else
								Msgs[DT] = Desc;
						}
					}
				}
			}
		}

		protected override void OnBarUpdate()
		{
			if(TimeSinceLastUpdate == DateTime.MinValue)
				TimeSinceLastUpdate = DateTime.Now;
			var ts = new TimeSpan(DateTime.Now.Ticks - TimeSinceLastUpdate.Ticks);
			if(State == State.Realtime && ts.TotalMinutes>1){
				TimeSinceLastUpdate = DateTime.Now;
				RemoveDrawObject("eos");
//				var ts = new TimeSpan(.Ticks - DateTime.Now.Ticks);
//				if(ts.TotalMinutes<60)
//					Draw.TextFixed(this, "eos", string.Format("The current session ends in {0}-minutes", ts.TotalMinutes.ToString("0")), TextPosition.Center, Brushes.White, new SimpleFont("Arial",18), Brushes.Crimson, Brushes.Red,90);
//				else if(ts.TotalMinutes<120)
//					Draw.TextFixed(this, "eos", string.Format("The current session ends in {0}-minutes", ts.TotalMinutes.ToString("0")), TextPosition.BottomLeft, Brushes.White, new SimpleFont("Arial",18), Brushes.Crimson, Brushes.Black,100);
				string o = string.Empty;
				foreach(var kvp in Msgs){
					o = o +Environment.NewLine + kvp.Key.ToShortTimeString()+": "+kvp.Value;
				}
				Draw.TextFixed(this, "eos", o, TextPosition.BottomLeft, Brushes.White, new SimpleFont("Arial",18), Brushes.Crimson, Brushes.Black,100);
			}
		}
		internal class LoadSoundFileList : StringConverter
		{
			#region LoadSoundFileList
			public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
			{
				//true means show a combobox
				return true;
			}

			public override bool GetStandardValuesExclusive(ITypeDescriptorContext context)
			{
				//true will limit to list. false will show the list, 
				//but allow free-form entry
				return false;
			}

			public override System.ComponentModel.TypeConverter.StandardValuesCollection
				GetStandardValues(ITypeDescriptorContext context)
			{
				string folder = pDirectory.Replace("<MyDocuments>",System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments));
				string search = "*.txt";

				System.IO.DirectoryInfo dirCustom=null;
				System.IO.FileInfo[] filCustom=null;
				try{
					dirCustom = new System.IO.DirectoryInfo(folder);
					filCustom = dirCustom.GetFiles(search);
				}catch{}

				var list = new List<string>();
				if(filCustom!=null){
					foreach (System.IO.FileInfo fi in filCustom)
					{
						if(!list.Contains(fi.Name)){
							list.Add(fi.Name);
						}
					}
				}
				return new StandardValuesCollection(list.ToArray());
			}
			#endregion
        }
		public static string pDirectory = "<MyDocuments>";
		[NinjaScriptProperty]
		[Display(Name="Directory", Order=10, GroupName="Parameters")]
		public string Directory
		{
			get { return pDirectory; }
			set { pDirectory = value.Trim(); }
		}
		private string pFileName = "EconReportsToday.txt";
		[NinjaScriptProperty]
		[RefreshProperties(RefreshProperties.All)]
		[TypeConverter(typeof(LoadSoundFileList))]
		[Display(Name="File name", Order=20, GroupName="Parameters")]
		public string FileName
		{
			get { return pFileName; }
			set { pFileName = value.Trim(); }
		}
	}
    public class LoadFileConverter : IndicatorBaseConverter // or StrategyBaseConverter
    {
		#region LoadFileConverter
        public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object component, Attribute[] attrs)
        {
            // we need the indicator instance which actually exists on the grid
            PrintMessagesToChart indicator = component as PrintMessagesToChart;

            // base.GetProperties ensures we have all the properties (and associated property grid editors)
            // NinjaTrader internal logic determines for a given indicator
            PropertyDescriptorCollection propertyDescriptorCollection = base.GetPropertiesSupported(context)
                                                                        ? base.GetProperties(context, component, attrs)
                                                                        : TypeDescriptor.GetProperties(component, attrs);

			if (indicator == null || propertyDescriptorCollection == null)
			    return propertyDescriptorCollection;

			//PropertyDescriptor prop = null;
			List<string> props = new List<string>(){"pDirectory"};

			Type pType = typeof(PrintMessagesToChart);
			var propInfo = pType.GetProperty("pDirectory");
			propInfo.GetValue(indicator);

			return propertyDescriptorCollection;
        }

        // Important: This must return true otherwise the type convetor will not be called
        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
        { return true; }
		#endregion
    }
}

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private Utilities.PrintMessagesToChart[] cachePrintMessagesToChart;
		public Utilities.PrintMessagesToChart PrintMessagesToChart(string directory, string fileName)
		{
			return PrintMessagesToChart(Input, directory, fileName);
		}

		public Utilities.PrintMessagesToChart PrintMessagesToChart(ISeries<double> input, string directory, string fileName)
		{
			if (cachePrintMessagesToChart != null)
				for (int idx = 0; idx < cachePrintMessagesToChart.Length; idx++)
					if (cachePrintMessagesToChart[idx] != null && cachePrintMessagesToChart[idx].Directory == directory && cachePrintMessagesToChart[idx].FileName == fileName && cachePrintMessagesToChart[idx].EqualsInput(input))
						return cachePrintMessagesToChart[idx];
			return CacheIndicator<Utilities.PrintMessagesToChart>(new Utilities.PrintMessagesToChart(){ Directory = directory, FileName = fileName }, input, ref cachePrintMessagesToChart);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.Utilities.PrintMessagesToChart PrintMessagesToChart(string directory, string fileName)
		{
			return indicator.PrintMessagesToChart(Input, directory, fileName);
		}

		public Indicators.Utilities.PrintMessagesToChart PrintMessagesToChart(ISeries<double> input , string directory, string fileName)
		{
			return indicator.PrintMessagesToChart(input, directory, fileName);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.Utilities.PrintMessagesToChart PrintMessagesToChart(string directory, string fileName)
		{
			return indicator.PrintMessagesToChart(Input, directory, fileName);
		}

		public Indicators.Utilities.PrintMessagesToChart PrintMessagesToChart(ISeries<double> input , string directory, string fileName)
		{
			return indicator.PrintMessagesToChart(input, directory, fileName);
		}
	}
}

#endregion
